// MACHINE GENERATED BY 'go generate' COMMAND
// TO EDIT A TYPE OR METHOD, COPY IT TO ANOTHER FILE IN THE PACKAGE
package p9p

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"io"
)

func writestring(w io.Writer, s string, must int) (err error) {
	data := []byte(s)
	switch l := len(data); {
	case l > must:
		_, err = w.Write(data[:must])
	case l < must:
		_, err = w.Write(data[:l])
		if err != nil {
			return err
		}
		underflow := must - l
		_, err = w.Write(bytes.Repeat([]byte{0x00}, underflow))
	default:
		_, err = w.Write(data[:l])
	}
	return err
}

func ioErr(name, kind string, ac, ex int) error {
	return fmt.Errorf("%s: short %s: %d/%d", name, kind, ac, ex)
}

type qid struct {
	data []byte
}

type s struct {
	n    uint16
	data []byte
}

type Hdr struct {
	size uint32
	msg  byte
}

type Tversion struct {
	size    uint32
	msg     byte
	tag     uint16
	msize   uint32
	version s
}

type Rversion struct {
	size    uint32
	msg     byte
	tag     uint16
	msize   uint32
	version s
}

type Tauth struct {
	size  uint32
	msg   byte
	tag   uint16
	afid  uint32
	uname s
	aname s
}

type Rauth struct {
	size uint32
	msg  byte
	tag  uint16
	aqid []byte
}

type Rerror struct {
	size  uint32
	msg   byte
	tag   uint16
	ename s
}

type Tflush struct {
	size   uint32
	msg    byte
	tag    uint16
	oldtag uint16
}

type Rflush struct {
	size uint32
	msg  byte
	tag  uint16
}

type Tattach struct {
	size  uint32
	msg   byte
	tag   uint16
	fid   uint32
	afid  uint32
	uname s
	aname s
}

type Rattach struct {
	size uint32
	msg  byte
	tag  uint16
	qid  []byte
}

type Twalk struct {
	size   uint32
	msg    byte
	tag    uint16
	fid    uint32
	newfid uint32
	nwname uint16
	wname  []s
}

type Rwalk struct {
	size  uint32
	msg   byte
	tag   uint16
	nwqid uint16
	wqid  []qid
}

type Topen struct {
	size uint32
	msg  byte
	tag  uint16
	fid  uint32
	mode byte
}

type Ropen struct {
	size   uint32
	msg    byte
	tag    uint16
	qid    []byte
	iounit uint32
}

type Topenfd struct {
	size uint32
	msg  byte
	tag  uint16
	fid  uint32
	mode byte
}

type Ropenfd struct {
	size   uint32
	msg    byte
	tag    uint16
	qid    []byte
	iounit uint32
	unixfd uint32
}

type Tcreate struct {
	size uint32
	msg  byte
	tag  uint16
	fid  uint32
	name s
	perm uint32
	mode byte
}

type Rcreate struct {
	size   uint32
	msg    byte
	tag    uint16
	qid    []byte
	iounit uint32
}

type Tread struct {
	size   uint32
	msg    byte
	tag    uint16
	fid    uint32
	offset uint64
	count  uint32
}

type Rread struct {
	size  uint32
	msg   byte
	tag   uint16
	count uint32
	data  []byte
}

type Twrite struct {
	size   uint32
	msg    byte
	tag    uint16
	fid    uint32
	offset uint64
	count  uint32
	data   []byte
}

type Rwrite struct {
	size  uint32
	msg   byte
	tag   uint16
	count uint32
}

type Tclunk struct {
	size uint32
	msg  byte
	tag  uint16
	fid  uint32
}

type Rclunk struct {
	size uint32
	msg  byte
	tag  uint16
}

type Tremove struct {
	size uint32
	msg  byte
	tag  uint16
	fid  uint32
}

type Rremove struct {
	size uint32
	msg  byte
	tag  uint16
}

type Tstat struct {
	size uint32
	msg  byte
	tag  uint16
	fid  uint32
}

type Rstat struct {
	size uint32
	msg  byte
	tag  uint16
	stat []byte
}

type Twstat struct {
	size uint32
	msg  byte
	tag  uint16
	fid  uint32
	stat []byte
}

type Rwstat struct {
	size uint32
	msg  byte
	tag  uint16
}

func (z *qid) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	z.data = make([]byte, 13)

	if n, err := r.Read(z.data); err != nil || n != 13 {
		return err
	}

	return nil
}

func (z *qid) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	{
		x := 13
		if n, err := w.Write(z.data[:x]); err != nil || n != x {
			return err
		}
	}
	return nil
}

func (z *s) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.n); err != nil {
		return err
	}

	z.data = make([]byte, int(z.n))

	if n, err := r.Read(z.data); err != nil || n != int(z.n) {
		return err
	}

	return nil
}

func (z *s) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.n); err != nil {
		return err
	}

	{
		x := int(z.n)
		if n, err := w.Write(z.data[:x]); err != nil || n != x {
			return err
		}
	}
	return nil
}

func (z *Hdr) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	return nil
}

func (z *Hdr) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	return nil
}

func (z *Tversion) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msize); err != nil {
		return err
	}

	if err := z.version.ReadBinary(r); err != nil {
		return err
	}

	return nil
}

func (z *Tversion) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msize); err != nil {
		return err
	}

	if err := z.version.WriteBinary(w); err != nil {
		return err
	}

	return nil
}

func (z *Rversion) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msize); err != nil {
		return err
	}

	if err := z.version.ReadBinary(r); err != nil {
		return err
	}

	return nil
}

func (z *Rversion) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msize); err != nil {
		return err
	}

	if err := z.version.WriteBinary(w); err != nil {
		return err
	}

	return nil
}

func (z *Tauth) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.afid); err != nil {
		return err
	}

	if err := z.uname.ReadBinary(r); err != nil {
		return err
	}

	if err := z.aname.ReadBinary(r); err != nil {
		return err
	}

	return nil
}

func (z *Tauth) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.afid); err != nil {
		return err
	}

	if err := z.uname.WriteBinary(w); err != nil {
		return err
	}

	if err := z.aname.WriteBinary(w); err != nil {
		return err
	}

	return nil
}

func (z *Rauth) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	z.aqid = make([]byte, 13)

	if n, err := r.Read(z.aqid); err != nil || n != 13 {
		return err
	}

	return nil
}

func (z *Rauth) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	{
		x := 13
		if n, err := w.Write(z.aqid[:x]); err != nil || n != x {
			return err
		}
	}
	return nil
}

func (z *Rerror) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	if err := z.ename.ReadBinary(r); err != nil {
		return err
	}

	return nil
}

func (z *Rerror) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	if err := z.ename.WriteBinary(w); err != nil {
		return err
	}

	return nil
}

func (z *Tflush) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.oldtag); err != nil {
		return err
	}

	return nil
}

func (z *Tflush) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.oldtag); err != nil {
		return err
	}

	return nil
}

func (z *Rflush) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	return nil
}

func (z *Rflush) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	return nil
}

func (z *Tattach) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.fid); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.afid); err != nil {
		return err
	}

	if err := z.uname.ReadBinary(r); err != nil {
		return err
	}

	if err := z.aname.ReadBinary(r); err != nil {
		return err
	}

	return nil
}

func (z *Tattach) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.fid); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.afid); err != nil {
		return err
	}

	if err := z.uname.WriteBinary(w); err != nil {
		return err
	}

	if err := z.aname.WriteBinary(w); err != nil {
		return err
	}

	return nil
}

func (z *Rattach) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	z.qid = make([]byte, 13)

	if n, err := r.Read(z.qid); err != nil || n != 13 {
		return err
	}

	return nil
}

func (z *Rattach) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	{
		x := 13
		if n, err := w.Write(z.qid[:x]); err != nil || n != x {
			return err
		}
	}
	return nil
}

func (z *Twalk) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.fid); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.newfid); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.nwname); err != nil {
		return err
	}

	z.wname = make([]s, int(z.nwname))
	for i := 0; i < int(z.nwname); i++ {

		if err := z.wname[i].ReadBinary(r); err != nil {
			return err
		}
	}

	return nil
}

func (z *Twalk) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.fid); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.newfid); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.nwname); err != nil {
		return err
	}

	z.wname = make([]s, int(z.nwname))
	for i := 0; i < int(z.nwname); i++ {
		if err := z.wname[i].WriteBinary(w); err != nil {
			return err
		}
	}

	return nil
}

func (z *Rwalk) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.nwqid); err != nil {
		return err
	}

	z.wqid = make([]qid, int(z.nwqid))
	for i := 0; i < int(z.nwqid); i++ {

		if err := z.wqid[i].ReadBinary(r); err != nil {
			return err
		}
	}

	return nil
}

func (z *Rwalk) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.nwqid); err != nil {
		return err
	}

	z.wqid = make([]qid, int(z.nwqid))
	for i := 0; i < int(z.nwqid); i++ {
		if err := z.wqid[i].WriteBinary(w); err != nil {
			return err
		}
	}

	return nil
}

func (z *Topen) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.fid); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.mode); err != nil {
		return err
	}

	return nil
}

func (z *Topen) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.fid); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.mode); err != nil {
		return err
	}

	return nil
}

func (z *Ropen) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	z.qid = make([]byte, 13)

	if n, err := r.Read(z.qid); err != nil || n != 13 {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.iounit); err != nil {
		return err
	}

	return nil
}

func (z *Ropen) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	{
		x := 13
		if n, err := w.Write(z.qid[:x]); err != nil || n != x {
			return err
		}
	}

	if err := binary.Write(w, binary.LittleEndian, z.iounit); err != nil {
		return err
	}

	return nil
}

func (z *Topenfd) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.fid); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.mode); err != nil {
		return err
	}

	return nil
}

func (z *Topenfd) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.fid); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.mode); err != nil {
		return err
	}

	return nil
}

func (z *Ropenfd) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	z.qid = make([]byte, 13)

	if n, err := r.Read(z.qid); err != nil || n != 13 {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.iounit); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.unixfd); err != nil {
		return err
	}

	return nil
}

func (z *Ropenfd) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	{
		x := 13
		if n, err := w.Write(z.qid[:x]); err != nil || n != x {
			return err
		}
	}

	if err := binary.Write(w, binary.LittleEndian, z.iounit); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.unixfd); err != nil {
		return err
	}

	return nil
}

func (z *Tcreate) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.fid); err != nil {
		return err
	}

	if err := z.name.ReadBinary(r); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.perm); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.mode); err != nil {
		return err
	}

	return nil
}

func (z *Tcreate) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.fid); err != nil {
		return err
	}

	if err := z.name.WriteBinary(w); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.perm); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.mode); err != nil {
		return err
	}

	return nil
}

func (z *Rcreate) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	z.qid = make([]byte, 13)

	if n, err := r.Read(z.qid); err != nil || n != 13 {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.iounit); err != nil {
		return err
	}

	return nil
}

func (z *Rcreate) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	{
		x := 13
		if n, err := w.Write(z.qid[:x]); err != nil || n != x {
			return err
		}
	}

	if err := binary.Write(w, binary.LittleEndian, z.iounit); err != nil {
		return err
	}

	return nil
}

func (z *Tread) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.fid); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.offset); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.count); err != nil {
		return err
	}

	return nil
}

func (z *Tread) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.fid); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.offset); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.count); err != nil {
		return err
	}

	return nil
}

func (z *Rread) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.count); err != nil {
		return err
	}

	z.data = make([]byte, int(z.count))

	if n, err := r.Read(z.data); err != nil || n != int(z.count) {
		return err
	}

	return nil
}

func (z *Rread) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.count); err != nil {
		return err
	}

	{
		x := int(z.count)
		if n, err := w.Write(z.data[:x]); err != nil || n != x {
			return err
		}
	}
	return nil
}

func (z *Twrite) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.fid); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.offset); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.count); err != nil {
		return err
	}

	z.data = make([]byte, int(z.count))

	if n, err := r.Read(z.data); err != nil || n != int(z.count) {
		return err
	}

	return nil
}

func (z *Twrite) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.fid); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.offset); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.count); err != nil {
		return err
	}

	{
		x := int(z.count)
		if n, err := w.Write(z.data[:x]); err != nil || n != x {
			return err
		}
	}
	return nil
}

func (z *Rwrite) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.count); err != nil {
		return err
	}

	return nil
}

func (z *Rwrite) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.count); err != nil {
		return err
	}

	return nil
}

func (z *Tclunk) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.fid); err != nil {
		return err
	}

	return nil
}

func (z *Tclunk) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.fid); err != nil {
		return err
	}

	return nil
}

func (z *Rclunk) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	return nil
}

func (z *Rclunk) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	return nil
}

func (z *Tremove) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.fid); err != nil {
		return err
	}

	return nil
}

func (z *Tremove) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.fid); err != nil {
		return err
	}

	return nil
}

func (z *Rremove) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	return nil
}

func (z *Rremove) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	return nil
}

func (z *Tstat) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.fid); err != nil {
		return err
	}

	return nil
}

func (z *Tstat) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.fid); err != nil {
		return err
	}

	return nil
}

func (z *Rstat) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	z.stat = make([]byte, int(z.size)-4-1-2)

	if n, err := r.Read(z.stat); err != nil || n != int(z.size)-4-1-2 {
		return err
	}

	return nil
}

func (z *Rstat) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	{
		x := int(z.size) - 4 - 1 - 2
		if n, err := w.Write(z.stat[:x]); err != nil || n != x {
			return err
		}
	}
	return nil
}

func (z *Twstat) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.fid); err != nil {
		return err
	}

	z.stat = make([]byte, int(z.size)-4-1-2)

	if n, err := r.Read(z.stat); err != nil || n != int(z.size)-4-1-2 {
		return err
	}

	return nil
}

func (z *Twstat) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.fid); err != nil {
		return err
	}

	{
		x := int(z.size) - 4 - 1 - 2
		if n, err := w.Write(z.stat[:x]); err != nil || n != x {
			return err
		}
	}
	return nil
}

func (z *Rwstat) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msg); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.tag); err != nil {
		return err
	}

	return nil
}

func (z *Rwstat) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.msg); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.tag); err != nil {
		return err
	}

	return nil
}
